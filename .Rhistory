filter(.metric == "smape")
cv_results %>%
filter(.metric == "smape", mtry == 7, min_n == 2)
View(cv_results)
View(cv_results[[3]][[1]])
cv_results %>% collect_metrics() %>%
filter(.metric == "smape")
install.packages('modeltime')
library(vroom)
library(tidyverse)
library(modeltime)
library(timetk)
# Data
train <- vroom("train.csv")
test <- vroom("test.csv")
# Subset store-item combo w my favorite numbers
storeItem <- train %>%
filter(store == 4, item == 17)
# Treat the problem as if we have 200
# time series (one for each store-item combo)
nStores <- max(train$store)
View(train)
# Subset two store-item combos w my favorite numbers
s4_i17 <- train %>%
filter(store == 4, item == 17)
s6_i13 <- train %>%
filter(store == 6, item == 13)
cv_split_4_17 %>%
tk_time_series_cv_plan() %>% # put into data frame
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
# CV split for 4_17
cv_split_4_17 <- time_series_split(s4_i17,
assess = "3 months",
cumulative = TRUE)
cv_split_4_17 %>%
tk_time_series_cv_plan() %>% # put into data frame
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
# CV for store 4 item 17
cv_split_4_17 <- time_series_split(s4_i17,
assess = "3 months",
cumulative = TRUE)
cv_preds_4_17 <- cv_split_4_17 %>%
tk_time_series_cv_plan() %>% # put into data frame
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
# CV for store 6 item 13
cv_split_6_13 <- time_series_split(s6_i13,
assess = "3 months",
cumulative = TRUE)
cv_split_6_13 %>%
tk_time_series_cv_plan() %>% # put into data frame
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
cv_preds_6_13 <- cv_split_6_13 %>%
tk_time_series_cv_plan() %>% # put into data frame
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
View(train)
es_model_4_17 <- exp_smoothing() %>%
set_engine('ets') %>%
fit(sales~date, data = training(cv_split_4_17))
library(tidymodels)
es_model_4_17 <- exp_smoothing() %>%
set_engine('ets') %>%
fit(sales~date, data = training(cv_split_4_17))
es_model_6_13 <- exp_smoothing() %>%
set_engine('ets') %>%
fit(sales~date, data = training(cv_split_6_13))
s4_i17_test <- test %>%
filter(store == 4, item == 17)
s6_i13_test <- test %>%
filter(store == 6, item == 13)
# Cross-validate to tune model
cv_results_4_17 <- modeltime_calibrate(es_model_4_17,
new_data = s4_i17_test)
# ES for store 6 item 13
es_model_6_13 <- exp_smoothing() %>%
set_engine('ets') %>%
fit(sales~date, data = training(cv_split_6_13))
# Cross-validate to tune model
cv_results_6_13 <- modeltime_calibrate(es_model_4_17,
new_data = s6_i13_test)
# Cross-validate to tune model
cv_results_4_17 <- modeltime_calibrate(es_model_4_17,
new_data = testing(cv_split_4_17))
# Cross-validate to tune model
cv_results_6_13 <- modeltime_calibrate(es_model_4_17,
new_data = testing(cv_split_6_13))
# Visualize CV results
cv_results_4_17 %>%
modeltime_forecast(
new_data = testing(cv_split_4_17),
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE)
# Visualize CV results
cv_results_vis_4_17 <- cv_results_4_17 %>%
modeltime_forecast(
new_data = testing(cv_split_4_17),
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE)
cv_results_vis_4_17
# ES for store 6 item 13
es_model_6_13 <- exp_smoothing() %>%
set_engine('ets') %>%
fit(sales~date, data = training(cv_split_6_13))
# Cross-validate to tune model
cv_results_6_13 <- modeltime_calibrate(es_model_6_13,
new_data = testing(cv_split_6_13))
# Visualize CV results
cv_results_vis_6_13 <- cv_results_6_13 %>%
modeltime_forecast(
new_data = testing(cv_split_6_13),
actual_data = s6_i13
) %>%
plot_modeltime_forecast(.interactive = FALSE)
cv_results_vis_6_13
cs_results_4_17 %>%
modeltime_refit(data = s4_i17)
cv_results_4_17 %>%
modeltime_refit(data = s4_i17)
# Refit to all data then forecast for store 6 item 13
es_fullfit_6_13 <- cv_results_6_13 %>%
modeltime_refit(data = s6_i13)
es_preds_4_17 <- es_fullfit %>%
modeltime_forecast(h = '3 months') %>%
rename(date = .index, sales = .value)%>%
select(date, sales) %>%
full_join(., y = test, by = "date") %>%
select(id, sales)
es_preds_4_17 <- es_fullfit_4_17 %>%
modeltime_forecast(h = '3 months') %>%
rename(date = .index, sales = .value)%>%
select(date, sales) %>%
full_join(., y = test, by = "date") %>%
select(id, sales)
es_fullfit_4_17 <- cv_results_4_17 %>%
modeltime_refit(data = s4_i17)
es_preds_4_17 <- es_fullfit_4_17 %>%
modeltime_forecast(h = '3 months') %>%
rename(date = .index, sales = .value)%>%
select(date, sales) %>%
full_join(., y = test, by = "date") %>%
select(id, sales)
es_preds_4_17
es_fullfit_plot_4_17 <- es_fullfit_4_17 %>%
modeltime_forecast(h = '3 months', actual_data = s4_i17) %>%
plot_modeltime_forecast(.interactive = FALSE)
es_fullfit_plot_4_17
# Refit to all data then forecast for store 6 item 13
es_fullfit_6_13 <- cv_results_6_13 %>%
modeltime_refit(data = s6_i13)
es_preds_6_13 <- es_fullfit_6_13 %>%
modeltime_forecast(h = '3 months') %>%
rename(date = .index, sales = .value)%>%
select(date, sales) %>%
full_join(., y = test, by = "date") %>%
select(id, sales)
es_fullfit_plot_6_13 <- es_fullfit_6_13 %>%
modeltime_forecast(h = '3 months', actual_data = s6_i13) %>%
plot_modeltime_forecast(.interactive = FALSE)
es_fullfit_plot_6_13
# Plots
pl <- plot_modeltime_forecast()
library(patchwork)
# Four-Way Plot
fourway <- (cv_preds_4_17 + cv_preds_6_13) / (es_fullfit_plot_4_17 + es_fullfit_plot_6_13)
fourway
# Four-Way Plot
fourway <- (cv_results_vis_4_17 + cv_results_vis_6cv_results_vis_4_17_13) / (es_fullfit_plot_4_17 + es_fullfit_plot_6_13)
# Four-Way Plot
fourway <- (cv_results_vis_4_17 + cv_results_vis_6_13) / (es_fullfit_plot_4_17 + es_fullfit_plot_6_13)
fourway
cv_preds_4_17
cv_preds_4_17
# ES for store 4 item 17
es_model_4_17 <- exp_smoothing() %>%
set_engine('ets') %>%
fit(sales~date, data = training(cv_split_4_17))
# Cross-validate to tune model
cv_results_4_17 <- modeltime_calibrate(es_model_4_17,
new_data = testing(cv_split_4_17))
# Visualize CV results
cv_results_vis_4_17 <- cv_results_4_17 %>%
modeltime_forecast(
new_data = testing(cv_split_4_17),
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE)
cv_results_vis_4_17
# Plots
plotly::subplot(cv_results_vis_4_17, cv_results_vis_6_13, es_fullfit_plot_4_17, es_fullfit_plot_6_13, nrows = 2)
# Load Libraries
library(vroom)
library(tidyverse)
library(modeltime)
library(timetk)
library(tidymodels)
library(patchwork)
library(forecast)
library(embed)
library(lubridate)
library(parsnip)
library(workflows)
# Get Data
# Load Data
train <- vroom("train.csv")
test <- vroom("test.csv")
# Subset two store-item combos w my favorite numbers
s4_i17 <- train %>%
filter(store == 4, item == 17)
s6_i13 <- train %>%
filter(store == 6, item == 13)
# Recipe for Linear Model Part
# Create Recipe
rec <- recipe(sales ~ ., data = s4_i17) %>%
step_rm(c('store', 'item')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(cumulative_sales = cumsum(sales)) %>%
step_dummy(all_nominal_predictors()) # Make nominal predictors into dummy variables
# Prep, Bake, and View Recipe
prepped <- prep(rec)
bake(prepped, s4_i17)
# Cross Validation Splits
# CV for store 4 item 17
cv_split_4_17 <- time_series_split(s4_i17,
assess = "3 months",
cumulative = TRUE)
cv_preds_4_17 <- cv_split_4_17 %>%
tk_time_series_cv_plan() %>% # put into data frame
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
cv_preds_4_17
# CV for store 6 item 13
cv_split_6_13 <- time_series_split(s6_i13,
assess = "3 months",
cumulative = TRUE)
cv_preds_6_13 <- cv_split_6_13 %>%
tk_time_series_cv_plan() %>% # put into data frame
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
cv_preds_6_13
# ARIMA
# ARIMA Model
arima_model <- arima_reg(seasonal_period = 365,
non_seasonal_ar = 5, # default max p to tune
non_seasonal_ma = 5, # default max q to tune
seasonal_ar = 2, # default max P to tune
seasonal_ma = 2, # default max Q to tune
non_seasonal_differences = 2, # default max d to tune
seasonal_differences = 2) %>% # default max D to tune
set_engine('auto_arima')
# ARIMA Workflows
arima_wf_4_17 <- workflow() %>%
add_recipe(rec) %>%
add_model(arima_model) %>%
fit(data = training(cv_split_4_17))
arima_wf_6_13 <- workflow() %>%
add_recipe(rec) %>%
add_model(arima_model) %>%
fit(data = training(cv_split_6_13))
# Calibrate/Tune Workflows
cv_results_4_17 <- modeltime_calibrate(arima_wf_4_17,
new_data = testing(cv_split_4_17))
cv_results_6_13 <- modeltime_calibrate(arima_wf_6_13,
new_data = testing(cv_split_6_13))
# Visualize and Evaluate CV Accuracies
cv_results_vis_4_17 <- cv_results_4_17 %>%
modeltime_forecast(
new_data = testing(cv_split_4_17),
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE)
cv_results_vis_4_17
cv_results_vis_6_13 <- cv_results_6_13 %>%
modeltime_forecast(
new_data = testing(cv_split_6_13),
actual_data = s6_i13
) %>%
plot_modeltime_forecast(.interactive = FALSE)
cv_results_vis_6_13
# Refit Best Model to Entire Data and Predict
arima_fullfit_4_17 <- cv_results_4_17 %>%
modeltime_refit(data = s4_i17)
test_s4_i17 <- test %>%
filter(store == 4, item == 17)
test_s6_i13 <- test %>%
filter(store == 6, item == 13)
arima_preds_4_17 <- arima_fullfit_4_17 %>%
modeltime_forecast(
new_data = s4_i17,
actual_data = s4_i17
) %>%
rename(date = .index, sales = .value)%>%
select(date, sales) %>%
full_join(., y = test, by = "date") %>%
select(id, sales)
arima_preds_4_17 %>%
plot_modeltime_forecast(.interactive = FALSE)
arima_fullfit_4_17 %>%
modeltime_forecast(
new_data = s4_i17,
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE)
arima_preds_4_17
# Refit Best Model to Entire Data and Predict
arima_fullfit_4_17 <- cv_results_4_17 %>%
modeltime_refit(data = s4_i17)
arima_forecast_plot_4_17 <- arima_fullfit_4_17 %>%
modeltime_forecast(
new_data = s4_i17,
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE)
arima_fullfit_6_13 <- cv_results_6_13 %>%
modeltime_refit(data = s6_i13)
arima_forecast_plot_6_13 <- arima_fullfit_6_13 %>%
modeltime_forecast(
new_data = s6_i13,
actual_data = s6_i13
) %>%
plot_modeltime_forecast(.interactive = FALSE)
arima_forecast_plot_4_17
arima_forecast_plot_6_13
cv_preds_4_17
# Plots
plotly::subplot(cv_results_vis_4_17, cv_results_vis_6_13, arima_forecast_plot_4_17, arima_forecast_plot_6_13, nrows = 2)
arima_forecast_plot_6_13 <- arima_fullfit_6_13 %>%
modeltime_forecast(
new_data = s6_i13,
actual_data = s6_i13
) %>%
plot_modeltime_forecast(.interactive = FALSE) %>%
ggtitle('3-Month Forecast, Store 6 Item 13')
arima_forecast_plot_4_17 <- arima_fullfit_4_17 %>%
modeltime_forecast(
new_data = s4_i17,
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE) %>%
ggtitle('3-Month Forecast, Store 4 Item 117')
arima_forecast_plot_4_17 <- arima_fullfit_4_17 %>%
modeltime_forecast(
new_data = s4_i17,
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE) %>%
ggtitle('3-Month Forecast, Store 4 Item 17')
# Visualize and Evaluate CV Accuracies
cv_results_vis_4_17 <- cv_results_4_17 %>%
modeltime_forecast(
new_data = testing(cv_split_4_17),
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE) %>%
ggtitle('CV Predictions and True Obs, Store 4 Item 17')
cv_results_vis_6_13 <- cv_results_6_13 %>%
modeltime_forecast(
new_data = testing(cv_split_6_13),
actual_data = s6_i13
) %>%
plot_modeltime_forecast(.interactive = FALSE)  %>%
ggtitle('CV Predictions and True Obs, Store 6 Item 13')
# Plots
plotly::subplot(cv_results_vis_4_17, cv_results_vis_6_13, arima_forecast_plot_4_17, arima_forecast_plot_6_13, nrows = 2)
# Four-Way Plot
fourway <- (cv_results_vis_4_17 + cv_results_vis_6_13) / (arima_forecast_plot_4_17 + arima_forecast_plot_6_13)
# Load Data
train <- vroom("train.csv")
test <- vroom("test.csv")
# Subset two store-item combos w my favorite numbers
s4_i17 <- train %>%
filter(store == 4, item == 17)
s6_i13 <- train %>%
filter(store == 6, item == 13)
test_s4_i17 <- test %>%
filter(store == 4, item == 17)
test_s6_i13 <- test %>%
filter(store == 6, item == 13)
# Recipe for Linear Model Part
# Create Recipe
rec <- recipe(sales ~ ., data = s4_i17) %>%
step_rm(c('store', 'item')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(cumulative_sales = cumsum(sales)) %>%
step_dummy(all_nominal_predictors()) # Make nominal predictors into dummy variables
# Prep, Bake, and View Recipe
prepped <- prep(rec)
bake(prepped, s4_i17)
# CV for store 4 item 17
cv_split_4_17 <- time_series_split(s4_i17,
assess = "3 months",
cumulative = TRUE)
cv_preds_4_17 <- cv_split_4_17 %>%
tk_time_series_cv_plan() %>% # put into data frame
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
cv_preds_4_17
# CV for store 6 item 13
cv_split_6_13 <- time_series_split(s6_i13,
assess = "3 months",
cumulative = TRUE)
cv_preds_6_13 <- cv_split_6_13 %>%
tk_time_series_cv_plan() %>% # put into data frame
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
cv_preds_6_13
# ARIMA Model
arima_model <- arima_reg(seasonal_period = 365,
non_seasonal_ar = 5, # default max p to tune
non_seasonal_ma = 5, # default max q to tune
seasonal_ar = 2, # default max P to tune
seasonal_ma = 2, # default max Q to tune
non_seasonal_differences = 2, # default max d to tune
seasonal_differences = 2) %>% # default max D to tune
set_engine('auto_arima')
# ARIMA Workflows
arima_wf_4_17 <- workflow() %>%
add_recipe(rec) %>%
add_model(arima_model) %>%
fit(data = training(cv_split_4_17))
arima_wf_6_13 <- workflow() %>%
add_recipe(rec) %>%
add_model(arima_model) %>%
fit(data = training(cv_split_6_13))
# Calibrate/Tune Workflows
cv_results_4_17 <- modeltime_calibrate(arima_wf_4_17,
new_data = testing(cv_split_4_17))
cv_results_6_13 <- modeltime_calibrate(arima_wf_6_13,
new_data = testing(cv_split_6_13))
# Visualize and Evaluate CV Accuracies
cv_results_vis_4_17 <- cv_results_4_17 %>%
modeltime_forecast(
new_data = testing(cv_split_4_17),
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE) %>%
ggtitle('CV Predictions and True Obs, Store 4 Item 17')
cv_results_vis_4_17
library(ggplot2)
# Visualize and Evaluate CV Accuracies
cv_results_vis_4_17 <- cv_results_4_17 %>%
modeltime_forecast(
new_data = testing(cv_split_4_17),
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE) %>%
ggtitle('CV Predictions and True Obs, Store 4 Item 17')
cv_results_vis_4_17
# Visualize and Evaluate CV Accuracies
cv_results_vis_4_17 <- cv_results_4_17 %>%
modeltime_forecast(
new_data = testing(cv_split_4_17),
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
labs(title = 'CV Predictions and True Obs, Store 4 Item 17')
cv_results_vis_4_17
cv_results_vis_6_13 <- cv_results_6_13 %>%
modeltime_forecast(
new_data = testing(cv_split_6_13),
actual_data = s6_i13
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
labs(title = 'CV Predictions and True Obs, Store 6 Item 13')
cv_results_vis_6_13
# Refit Best Model to Entire Data and Predict
arima_fullfit_4_17 <- cv_results_4_17 %>%
modeltime_refit(data = s4_i17)
arima_forecast_plot_4_17 <- arima_fullfit_4_17 %>%
modeltime_forecast(
new_data = s4_i17,
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
labs(title = '3-Month Forecast, Store 4 Item 17')
arima_forecast_plot_4_17
arima_fullfit_6_13 <- cv_results_6_13 %>%
modeltime_refit(data = s6_i13)
arima_forecast_plot_6_13 <- arima_fullfit_6_13 %>%
modeltime_forecast(
new_data = s6_i13,
actual_data = s6_i13
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
labs(title = '3-Month Forecast, Store 6 Item 13')
arima_forecast_plot_6_13
# Plots
plotly::subplot(cv_results_vis_4_17, cv_results_vis_6_13, arima_forecast_plot_4_17, arima_forecast_plot_6_13, nrows = 2)
# Four-Way Plot
fourway <- (cv_results_vis_4_17 + cv_results_vis_6_13) / (arima_forecast_plot_4_17 + arima_forecast_plot_6_13)
fourway
arima_fullfit_4_17 <- cv_results_4_17 %>%
modeltime_refit(data = s4_i17)
arima_forecast_plot_4_17 <- arima_fullfit_4_17 %>%
modeltime_forecast(
new_data = test_s4_i17,
actual_data = s4_i17
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
labs(title = '3-Month Forecast, Store 4 Item 17')
arima_forecast_plot_4_17
arima_fullfit_6_13 <- cv_results_6_13 %>%
modeltime_refit(data = s6_i13)
arima_forecast_plot_6_13 <- arima_fullfit_6_13 %>%
modeltime_forecast(
new_data = test_s6_i13,
actual_data = s6_i13
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
labs(title = '3-Month Forecast, Store 6 Item 13')
arima_forecast_plot_6_13
# Four-Way Plot
fourway <- (cv_results_vis_4_17 + cv_results_vis_6_13) / (arima_forecast_plot_4_17 + arima_forecast_plot_6_13)
fourway
any(is.na(cv_results_4_17))
any(is.na(cv_results_6_13))
