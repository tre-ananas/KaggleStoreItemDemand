bake(rec, train) %>%
slice(1:10)
bake(prepped, train) %>%
slice(1:10)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate(season = case_when(
between(month, 3, 5) ~ "Spring",
between(month, 6, 8) ~ "Summer",
between(month, 9, 11) ~ "Fall",
TRUE ~ "Winter"
))
# Prep, Bake, and View Recipe
prepped <- prep(rec)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate(season = case_when(
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
month %in% c(9, 10, 11) ~ "Fall",
TRUE ~ "Winter"
))
# Prep, Bake, and View Recipe
prepped <- prep(rec)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter'))
# Prep, Bake, and View Recipe
prepped <- prep(rec)
bake(prepped, train) %>%
slice(1:10)
x <- bake(prepped, train) %>%
slice(1:10)
View(x)
str(x)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter'))
# Prep, Bake, and View Recipe
prepped <- prep(rec)
x <- bake(prepped, train) %>%
slice(1:10)
str(x)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_factor(date_doy, date_week, date_quarter)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate(date_doy = as.factor(date_doy),
date_week = as.factor(date_week),
date_quarter = as.factor(date_quarter)) %>%
# Prep, Bake, and View Recipe
prepped <- prep(rec)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate(date_doy = as.factor(date_doy),
date_week = as.factor(date_week),
date_quarter = as.factor(date_quarter)) %>%
# Prep, Bake, and View Recipe
prepped <- prep(rec)
View(train)
# Create Recipe
rec <- recipe(train$sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate(date_doy = as.factor(date_doy),
date_week = as.factor(date_week),
date_quarter = as.factor(date_quarter)) %>%
# Prep, Bake, and View Recipe
prepped <- prep(rec)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate(date_doy = as.factor(date_doy),
date_week = as.factor(date_week),
date_quarter = as.factor(date_quarter)) %>%
# Prep, Bake, and View Recipe
prepped <- prep(rec)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter'))
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate_at(all_integer_predictors(), fn = factor)
# Prep, Bake, and View Recipe
prepped <- prep(rec)
x <- bake(prepped, train) %>%
slice(1:10)
str(x)
library(lubridate)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(season = factor(case_when(
between(month(date), 3, 5) ~ "Spring",
between(month(date), 6, 8) ~ "Summer",
between(month(date), 9, 11) ~ "Fall",
TRUE ~ "Winter"
)))
# Prep, Bake, and View Recipe
prepped <- prep(rec)
x <- bake(prepped, train) %>%
slice(1:10)
str(x)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(season = factor(case_when(
between(month(date), 3, 5) ~ "Spring",
between(month(date), 6, 8) ~ "Summer",
between(month(date), 9, 11) ~ "Fall",
TRUE ~ "Winter"
))) %>%
step_mutate(order = row_number(date))
# Prep, Bake, and View Recipe
prepped <- prep(rec)
x <- bake(prepped, train) %>%
slice(1:10)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(season = factor(case_when(
between(month(date), 3, 5) ~ "Spring",
between(month(date), 6, 8) ~ "Summer",
between(month(date), 9, 11) ~ "Fall",
TRUE ~ "Winter"
))) %>%
step_mutate(order = row_number())
# Prep, Bake, and View Recipe
prepped <- prep(rec)
x <- bake(prepped, train) %>%
slice(1:10)
View(test)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(season = factor(case_when(
between(month(date), 3, 5) ~ "Spring",
between(month(date), 6, 8) ~ "Summer",
between(month(date), 9, 11) ~ "Fall",
TRUE ~ "Winter"
))) %>%
step_lag(date_doy, lag = 7)
# Prep, Bake, and View Recipe
prepped <- prep(rec)
x <- bake(prepped, train) %>%
slice(1:10)
str(x)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(season = factor(case_when(
between(month(date), 3, 5) ~ "Spring",
between(month(date), 6, 8) ~ "Summer",
between(month(date), 9, 11) ~ "Fall",
TRUE ~ "Winter"
)))
# Prep, Bake, and View Recipe
prepped <- prep(rec)
bake(prepped, train) %>%
slice(1:10)
# Create Recipe
rec <- recipe(sales ~ ., data = train) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(season = factor(case_when(
between(month(date), 3, 5) ~ "Spring",
between(month(date), 6, 8) ~ "Summer",
between(month(date), 9, 11) ~ "Fall",
TRUE ~ "Winter"
))) %>%
step_mutate(cumulative_sales = cumsum(sales))
# Prep, Bake, and View Recipe
prepped <- prep(rec)
bake(prepped, train) %>%
slice(1:10)
x <- bake(prepped, train) %>%
slice(1:10)
str(x)
# Fit Model
rand_for_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1000) %>% # Type of Model
set_engine("ranger") %>% # What R function to use
set_mode("regression")
library(vroom)
library(tidyverse)
library(timetk)
library(patchwork)
library(tidyverse)
library(embed)
library(lubridate)
library(rpart)
# Fit Model
rand_for_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1000) %>% # Type of Model
set_engine("ranger") %>% # What R function to use
set_mode("regression")
library(rpart)
# Fit Model
rand_for_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1000) %>% # Type of Model
set_engine("ranger") %>% # What R function to use
set_mode("regression")
# Fit Model
rand_for_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1000,
engine = "ranger",
mode = "regression")
# Fit Model
rand_for_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1000,
engine = "ranger",
mode = "regression")
# Fit Model
# Fit Model
rand_for_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1000, # Number of trees in the forest
engine = "ranger", # Specify the R function to use
mode = "regression") # Specify the mode directly
library(parsnip)
library(ranger)
# Fit Model
# Fit Model
rand_for_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1000, # Number of trees in the forest
engine = "ranger", # Specify the R function to use
mode = "regression") # Specify the mode directly
# Set Workflow
rand_for_workflow <- workflow() %>%
add_recipe(rec) %>%
add_model(rand_for_model)
library(vroom)
library(tidyverse)
library(timetk)
library(patchwork)
library(tidyverse)
library(embed)
library(lubridate)
library(parsnip)
library(ranger)
# Set Workflow
rand_for_workflow <- workflow() %>%
add_recipe(rec) %>%
add_model(rand_for_model)
library(workflows)
# Set Workflow
rand_for_workflow <- workflow() %>%
add_recipe(rec) %>%
add_model(rand_for_model)
# Set Workflow
rand_for_workflow <- workflow() %>%
add_recipe(rec) %>%
add_model(rand_for_model)
tuning_grid <- grid_regular(mtry(range = c(1, 7)), # Grid of values to tune over
min_n(),
levels = 2) # levels = L means L^2 total tuning possibilities
# Packages
library(vroom)
library(tidyverse)
library(timetk)
library(patchwork)
library(tidyverse)
library(embed)
library(lubridate)
library(parsnip)
library(ranger)
library(workflows)
library(tidyverse)
library(vroom)
library(tidymodels)
library(poissonreg)
library(rpart)
library(stacks)
library(dbarts)
library(xgboost)
# Data
train <- vroom("train.csv")
test <- vroom("test.csv")
# Subset store-item combo w my favorite numbers
storeItem <- train %>%
filter(store == 4, item == 17)
# Create Recipe
rec <- recipe(sales ~ ., data = storeItem) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('doy', 'week', 'month', 'quarter')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(season = factor(case_when(
between(month(date), 3, 5) ~ "Spring",
between(month(date), 6, 8) ~ "Summer",
between(month(date), 9, 11) ~ "Fall",
TRUE ~ "Winter"
))) %>%
step_mutate(cumulative_sales = cumsum(sales)) %>%
step_dummy(all_nominal_predictors()) # Make nominal predictors into dummy variables
# Prep, Bake, and View Recipe
prepped <- prep(rec)
bake(prepped, storeItem)
# Model
plr_model <- linear_reg(penalty = tune(),
mixture = tune()) %>%
set_engine("glmnet") # Function to fit R
# Set Workflow
plr_workflow <- workflow() %>%
add_recipe(rec) %>%
add_model(plr_model)
# Grid of values to tune over
tuning_grid <- grid_regular(penalty(),
mixture(),
levels = 5) # levels = L means L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem,
v = 5, # 5 Folds
repeats = 1)
# Run the CV
cv_results <- plr_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape)) # or leave metrics NULL
# Fit Model -------------------------------------
rf_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) %>% # Type of Model
set_engine("ranger") %>% # What R function to use
set_mode("regression")
# Workflow w model and recipe -------------------
rf_workflow <- workflow() %>% # Set Workflow
add_recipe(storeItem) %>%
add_model(rf_model)
# Workflow
rf_workflow <- workflow() %>%
add_recipe(rec) %>%
add_model(rf_model)
# Tuning grid
tuning_grid <- grid_regular(mtry(range = c(1, 7)), # Grid of values to tune over
min_n(),
levels = 2) # levels = L means L^2 total tuning possibilities
folds <- vfold_cv(storeItem, # Split data for CV
v = 2, # 2 folds
repeats = 1)
# Run CV
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
# Find Best Tuning Parameters
bestTune <- cv_results %>%
select_best("smape")
# Create Recipe
rec <- recipe(sales ~ ., data = storeItem) %>%
step_rm(c('store', 'item')) %>%
step_date(date, features = c('week', 'month', 'quarter')) %>%
step_mutate_at(all_integer_predictors(), fn = factor) %>%
step_mutate(season = factor(case_when(
between(month(date), 3, 5) ~ "Spring",
between(month(date), 6, 8) ~ "Summer",
between(month(date), 9, 11) ~ "Fall",
TRUE ~ "Winter"
))) %>%
step_mutate(cumulative_sales = cumsum(sales)) %>%
step_dummy(all_nominal_predictors()) # Make nominal predictors into dummy variables
# Prep, Bake, and View Recipe
prepped <- prep(rec)
bake(prepped, storeItem)
### Model: Random Forest ###
# Model
rf_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) %>% # Type of Model
set_engine("ranger") %>% # What R function to use
set_mode("regression")
# Workflow
rf_workflow <- workflow() %>%
add_recipe(rec) %>%
add_model(rf_model)
# Tuning grid
tuning_grid <- grid_regular(mtry(range = c(1, 7)), # Grid of values to tune over
min_n(),
levels = 2) # levels = L means L^2 total tuning possibilities
folds <- vfold_cv(storeItem, # Split data for CV
v = 2, # 2 folds
repeats = 1)
# Run CV
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
# Find Best Tuning Parameters
bestTune <- cv_results %>%
select_best("smape")
# Find Best Tuning Parameters
bestTune <- cv_results %>%
select_best("smape")
collect_metrics(cv_results) %>%
filter(bestTune) %>%
pull(mean)
# Find Best Tuning Parameters
bestTune <- cv_results %>%
select_best("smape")
collect_metrics(cv_results) %>%
filter(bestTune) %>%
pull(mean)
bestTune
collect_metrics(cv_results) %>%
filter(bestTune)
collect_metrics(cv_results) %>%
filter(bestTune) %>%
pull(mean)
View(cv_results)
View(bestTune)
View(cv_results)
cv_results %>% collect_metrics() %>%
filter(.metrics == "smape")
cv_results %>% collect_metrics() %>%
filter(.metric == "smape")
cv_results %>% collect_metrics() %>%
filter(.metric == "smape") %>%
filter(bestTune)
bestTune
# Find Best Tuning Parameters
best_tune <- cv_results %>%
select_best("smape")
cv_results %>% collect_metrics() %>%
filter(.metric == "smape")
best_tune$mtry
cv_results %>% collect_metrics() %>%
filter(.metric == "smape") %>%
filter(.mtry == best_tune$mtry)
cv_results %>% collect_metrics() %>%
filter(.metric == "smape")
cv_results %>% collect_metrics() %>%
filter(.metric == "smape", .mtry == best_tune$mtry)
cv_results %>% collect_metrics() %>%
filter(.metric == "smape")
# Find Best Tuning Parameters
best_tune <- cv_results %>%
select_best("smape")
best_tune
cv_results %>% collect_metrics() %>%
filter(.metric == "smape")
rf_model <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) %>% # Type of Model
set_engine("ranger") %>% # What R function to use
set_mode("regression")
# Workflow
rf_workflow <- workflow() %>%
add_recipe(rec) %>%
add_model(rf_model)
# Tuning grid
tuning_grid <- grid_regular(mtry(range = c(1, 7)), # Grid of values to tune over
min_n(),
levels = 5) # levels = L means L^2 total tuning possibilities
folds <- vfold_cv(storeItem, # Split data for CV
v = 5, # 2 folds
repeats = 1)
# Run CV
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
# Find Best Tuning Parameters
best_tune <- cv_results %>%
select_best("smape")
best_tune
cv_results %>% collect_metrics() %>%
filter(.metric == "smape")
cv_results %>% collect_metrics() %>%
filter(.metric == "smape") %>%
pull(mean)
# Find Best Tuning Parameters
best_tune <- cv_results %>%
select_best("smape")
best_tune
cv_results %>% collect_metrics() %>%
filter(.metric == "smape")
cv_results %>%
filter(.metric == "smape", mtry == 7, min_n == 2)
View(cv_results)
View(cv_results[[3]][[1]])
cv_results %>% collect_metrics() %>%
filter(.metric == "smape")
